import{_ as a,c as s,o as l,b as n}from"./app.264feb4a.js";const e="/docs/assets/image-20210824172203764.2980d887.png",o="/docs/assets/image-20210824172900441.da6ce701.png",p="/docs/assets/image-20210824175156112.beca4f80.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是线程死锁","slug":"什么是线程死锁","link":"#什么是线程死锁","children":[]},{"level":2,"title":"形成死锁的四个必要条件是什么","slug":"形成死锁的四个必要条件是什么","link":"#形成死锁的四个必要条件是什么","children":[]},{"level":2,"title":"如何避免线程死锁","slug":"如何避免线程死锁","link":"#如何避免线程死锁","children":[]},{"level":2,"title":"创建线程的四种方式","slug":"创建线程的四种方式","link":"#创建线程的四种方式","children":[]},{"level":2,"title":"runnable 和 callable 有什么区别","slug":"runnable-和-callable-有什么区别","link":"#runnable-和-callable-有什么区别","children":[]},{"level":2,"title":"线程的 run()和 start()有什么区别？","slug":"线程的-run-和-start-有什么区别","link":"#线程的-run-和-start-有什么区别","children":[]},{"level":2,"title":"什么是 Callable 和 Future?","slug":"什么是-callable-和-future","link":"#什么是-callable-和-future","children":[]},{"level":2,"title":"线程的状态","slug":"线程的状态","link":"#线程的状态","children":[]},{"level":2,"title":"线程同步以及线程调度相关的方法。","slug":"线程同步以及线程调度相关的方法。","link":"#线程同步以及线程调度相关的方法。","children":[]},{"level":2,"title":"Java 中你怎样唤醒一个阻塞的线程？","slug":"java-中你怎样唤醒一个阻塞的线程","link":"#java-中你怎样唤醒一个阻塞的线程","children":[]},{"level":2,"title":"notify() 和 notifyAll() 有什么区别？","slug":"notify-和-notifyall-有什么区别","link":"#notify-和-notifyall-有什么区别","children":[]},{"level":2,"title":"什么是线程同步和线程互斥，有哪几种实现方式？","slug":"什么是线程同步和线程互斥-有哪几种实现方式","link":"#什么是线程同步和线程互斥-有哪几种实现方式","children":[]},{"level":2,"title":"如果你提交任务时，线程池队列已满，这时会发生什么","slug":"如果你提交任务时-线程池队列已满-这时会发生什么","link":"#如果你提交任务时-线程池队列已满-这时会发生什么","children":[]},{"level":2,"title":"在 Java 程序中怎么保证多线程的运行安全？","slug":"在-java-程序中怎么保证多线程的运行安全","link":"#在-java-程序中怎么保证多线程的运行安全","children":[]},{"level":2,"title":"线程的常用API有哪些","slug":"线程的常用api有哪些","link":"#线程的常用api有哪些","children":[]},{"level":2,"title":"线程之间如何通信及线程之间如何同步","slug":"线程之间如何通信及线程之间如何同步","link":"#线程之间如何通信及线程之间如何同步","children":[]},{"level":2,"title":"说说自己是怎么使用 synchronized 关键字，在项目中用到了吗","slug":"说说自己是怎么使用-synchronized-关键字-在项目中用到了吗","link":"#说说自己是怎么使用-synchronized-关键字-在项目中用到了吗","children":[]},{"level":2,"title":"单例模式了解吗？给我解释一下双重检验锁方式实现单例模式！","slug":"单例模式了解吗-给我解释一下双重检验锁方式实现单例模式","link":"#单例模式了解吗-给我解释一下双重检验锁方式实现单例模式","children":[]},{"level":2,"title":"什么是 CAS","slug":"什么是-cas","link":"#什么是-cas","children":[]},{"level":2,"title":"CAS 的会产生什么问题？","slug":"cas-的会产生什么问题","link":"#cas-的会产生什么问题","children":[]},{"level":2,"title":"什么是可重入锁","slug":"什么是可重入锁","link":"#什么是可重入锁","children":[]},{"level":2,"title":"什么是偏向锁","slug":"什么是偏向锁","link":"#什么是偏向锁","children":[]},{"level":2,"title":"什么是自旋锁","slug":"什么是自旋锁","link":"#什么是自旋锁","children":[]},{"level":2,"title":"什么是轻量级锁 , 重量级锁","slug":"什么是轻量级锁-重量级锁","link":"#什么是轻量级锁-重量级锁","children":[]},{"level":2,"title":"多线程中 synchronized 锁升级的原理是什么？","slug":"多线程中-synchronized-锁升级的原理是什么","link":"#多线程中-synchronized-锁升级的原理是什么","children":[]},{"level":2,"title":"线程 B 怎么知道线程 A 修改了变量","slug":"线程-b-怎么知道线程-a-修改了变量","link":"#线程-b-怎么知道线程-a-修改了变量","children":[]},{"level":2,"title":"synchronized、volatile、CAS 比较","slug":"synchronized、volatile、cas-比较","link":"#synchronized、volatile、cas-比较","children":[]},{"level":2,"title":"synchronized 和 Lock 有什么区别？","slug":"synchronized-和-lock-有什么区别","link":"#synchronized-和-lock-有什么区别","children":[]},{"level":2,"title":"synchronized 和 ReentrantLock 区别是什么？","slug":"synchronized-和-reentrantlock-区别是什么","link":"#synchronized-和-reentrantlock-区别是什么","children":[]},{"level":2,"title":"volatile 关键字的作用","slug":"volatile-关键字的作用","link":"#volatile-关键字的作用","children":[]},{"level":2,"title":"volatile 变量和 atomic 变量有什么不同？","slug":"volatile-变量和-atomic-变量有什么不同","link":"#volatile-变量和-atomic-变量有什么不同","children":[]},{"level":2,"title":"volatile 能使得一个非原子操作变成原子操作吗","slug":"volatile-能使得一个非原子操作变成原子操作吗","link":"#volatile-能使得一个非原子操作变成原子操作吗","children":[]},{"level":2,"title":"乐观锁和悲观锁的理解及如何实现，有哪些实现方式？","slug":"乐观锁和悲观锁的理解及如何实现-有哪些实现方式","link":"#乐观锁和悲观锁的理解及如何实现-有哪些实现方式","children":[]},{"level":2,"title":"什么是原子类","slug":"什么是原子类","link":"#什么是原子类","children":[]},{"level":2,"title":"什么是线程池？","slug":"什么是线程池","link":"#什么是线程池","children":[]},{"level":2,"title":"常用的四种线程池","slug":"常用的四种线程池","link":"#常用的四种线程池","children":[]},{"level":2,"title":"创建线程池的参数有哪些","slug":"创建线程池的参数有哪些","link":"#创建线程池的参数有哪些","children":[]},{"level":2,"title":"什么是Executors？","slug":"什么是executors","link":"#什么是executors","children":[]},{"level":2,"title":"线程池的执行原理？","slug":"线程池的执行原理","link":"#线程池的执行原理","children":[]},{"level":2,"title":"如何合理分配线程池大小?","slug":"如何合理分配线程池大小","link":"#如何合理分配线程池大小","children":[]},{"level":2,"title":"什么是Java并发容器(JUC)","slug":"什么是java并发容器-juc","link":"#什么是java并发容器-juc","children":[]},{"level":2,"title":"常用的并发工具类有哪些？","slug":"常用的并发工具类有哪些","link":"#常用的并发工具类有哪些","children":[]},{"level":2,"title":"新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？","slug":"新建-t1、t2、t3-三个线程-如何保证它们按顺序执行","link":"#新建-t1、t2、t3-三个线程-如何保证它们按顺序执行","children":[]},{"level":2,"title":"线程池启动线程 submit()和 execute()方法有什么不同？","slug":"线程池启动线程-submit-和-execute-方法有什么不同","link":"#线程池启动线程-submit-和-execute-方法有什么不同","children":[]},{"level":2,"title":"CyclicBarrier 和 CountDownLatch 的区别？","slug":"cyclicbarrier-和-countdownlatch-的区别","link":"#cyclicbarrier-和-countdownlatch-的区别","children":[]},{"level":2,"title":"ThreadLocal的底层原理","slug":"threadlocal的底层原理","link":"#threadlocal的底层原理","children":[]},{"level":2,"title":"ThreadLocal 是什么？有什么应用场景？","slug":"threadlocal-是什么-有什么应用场景","link":"#threadlocal-是什么-有什么应用场景","children":[]},{"level":2,"title":"ReadWriteLock 有什么用？","slug":"readwritelock-有什么用","link":"#readwritelock-有什么用","children":[]}],"relativePath":"zh/java/面试/Java基础/Java多线程.md","lastUpdated":1675892686000}'),t={name:"zh/java/面试/Java基础/Java多线程.md"},c=n("",167),r=[c];function i(y,A,h,C,d,D){return l(),s("div",null,r)}const v=a(t,[["render",i]]);export{u as __pageData,v as default};
