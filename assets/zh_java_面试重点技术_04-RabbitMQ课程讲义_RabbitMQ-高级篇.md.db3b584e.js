import{_ as a,c as n,o as l,b as p}from"./app.264feb4a.js";const o="/docs/assets/image-20210718155003157.f574cd5e.png",e="/docs/assets/image-20210718155059371.0e786510.png",t="/docs/assets/image-20210718155328927.a126a2ed.png",c="/docs/assets/image-20210718155448734.a5e010c5.png",r="/docs/assets/image-20210718160907166.587a7cc9.png",i="/docs/assets/image-20210718161707992.2d5637f9.png",D="/docs/assets/image-20220123155652771.5da69c0f.png",y="/docs/assets/image-20220123155811012.07acb7e7.png",F="/docs/assets/image-20220123155946847.765e36f8.png",A="/docs/assets/image-20210718164412450.f53b9dd0.png",C="/docs/assets/image-20210718164729543.7aabab46.png",u="/docs/assets/image-20210718165100016.b12857ed.png",d="/docs/assets/image-20210718171705383.d4a6ae35.png",h="/docs/assets/image-20210718171759179.334fb00e.png",g="/docs/assets/image-20210718172746378.dcfa0a67.png",m="/docs/assets/image-20220123172507404.d3454477.png",b="/docs/assets/image-20220123172524662.86387258.png",E="/docs/assets/image-20210718174328383.8bd94c61.png",_="/docs/assets/image-20210718174416160.a054c24d.png",s="/docs/assets/image-20210718174506856.b6f7e1ae.png",f="/docs/assets/image-20210821073801398.0bf18f0f.png",q="/docs/assets/image-20210718182643311.38ab6213.png",v="/docs/assets/image-20210718191657478.65182d6d.png",x="/docs/assets/image-20210718191738706.64272140.png",k="/docs/assets/image-20210718191939140.4c00060c.png",Q="/docs/assets/image-20210718192004662.d82a3197.png",R="/docs/assets/image-20210718192529342.7c8e7569.png",M="/docs/assets/image-20210718193409812.53c96e23.png",B="/docs/assets/image-20210718193747649.acab4a34.png",T="/docs/assets/image-20210718193831076.567bf376.png",j="/docs/assets/image-20210718193917009.36270fc8.png",w="/docs/assets/image-20220123201327300.0fb0982b.png",S="/docs/assets/image-20220123201339630.72735d92.png",z="/docs/assets/image-20220123202042641.db424cbd.png",L="/docs/assets/image-20210718194040498.0b14cf5d.png",I="/docs/assets/image-20210718194522223.8673ddc8.png",P="/docs/assets/image-20210718194539054.b8352f3b.png",U="/docs/assets/image-20210718220843323.4beadc93.png",K="/docs/assets/image-20210718221039542.34311eab.png",ss=JSON.parse('{"title":"服务异步通信-高级篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.1.生产者消息确认","slug":"_1-1-生产者消息确认","link":"#_1-1-生产者消息确认","children":[{"level":3,"title":"1.1.1.修改配置","slug":"_1-1-1-修改配置","link":"#_1-1-1-修改配置","children":[]},{"level":3,"title":"1.1.2.定义Return回调","slug":"_1-1-2-定义return回调","link":"#_1-1-2-定义return回调","children":[]},{"level":3,"title":"1.1.3.定义ConfirmCallback","slug":"_1-1-3-定义confirmcallback","link":"#_1-1-3-定义confirmcallback","children":[]},{"level":3,"title":"1.1.4.测试","slug":"_1-1-4-测试","link":"#_1-1-4-测试","children":[]}]},{"level":2,"title":"1.2.消息持久化","slug":"_1-2-消息持久化","link":"#_1-2-消息持久化","children":[{"level":3,"title":"1.2.1.交换机持久化","slug":"_1-2-1-交换机持久化","link":"#_1-2-1-交换机持久化","children":[]},{"level":3,"title":"1.2.2.队列持久化","slug":"_1-2-2-队列持久化","link":"#_1-2-2-队列持久化","children":[]},{"level":3,"title":"1.2.3.消息持久化","slug":"_1-2-3-消息持久化","link":"#_1-2-3-消息持久化","children":[]}]},{"level":2,"title":"1.3.消费者消息确认","slug":"_1-3-消费者消息确认","link":"#_1-3-消费者消息确认","children":[{"level":3,"title":"1.3.1.演示none模式","slug":"_1-3-1-演示none模式","link":"#_1-3-1-演示none模式","children":[]},{"level":3,"title":"1.3.2.演示auto模式","slug":"_1-3-2-演示auto模式","link":"#_1-3-2-演示auto模式","children":[]}]},{"level":2,"title":"1.4.消费失败重试机制","slug":"_1-4-消费失败重试机制","link":"#_1-4-消费失败重试机制","children":[{"level":3,"title":"1.4.1.本地重试","slug":"_1-4-1-本地重试","link":"#_1-4-1-本地重试","children":[]},{"level":3,"title":"1.4.2.失败策略","slug":"_1-4-2-失败策略","link":"#_1-4-2-失败策略","children":[]}]},{"level":2,"title":"1.5.总结","slug":"_1-5-总结","link":"#_1-5-总结","children":[]},{"level":2,"title":"2.1.初识死信交换机","slug":"_2-1-初识死信交换机","link":"#_2-1-初识死信交换机","children":[{"level":3,"title":"2.1.1.什么是死信交换机","slug":"_2-1-1-什么是死信交换机","link":"#_2-1-1-什么是死信交换机","children":[]},{"level":3,"title":"2.1.2.利用死信交换机接收死信（拓展）","slug":"_2-1-2-利用死信交换机接收死信-拓展","link":"#_2-1-2-利用死信交换机接收死信-拓展","children":[]},{"level":3,"title":"2.1.3.总结","slug":"_2-1-3-总结","link":"#_2-1-3-总结","children":[]}]},{"level":2,"title":"2.2.TTL","slug":"_2-2-ttl","link":"#_2-2-ttl","children":[{"level":3,"title":"2.2.1.接收超时死信的死信交换机","slug":"_2-2-1-接收超时死信的死信交换机","link":"#_2-2-1-接收超时死信的死信交换机","children":[]},{"level":3,"title":"2.2.2.声明一个队列，并且指定TTL","slug":"_2-2-2-声明一个队列-并且指定ttl","link":"#_2-2-2-声明一个队列-并且指定ttl","children":[]},{"level":3,"title":"2.2.3.发送消息时，设定TTL","slug":"_2-2-3-发送消息时-设定ttl","link":"#_2-2-3-发送消息时-设定ttl","children":[]},{"level":3,"title":"2.2.4.总结","slug":"_2-2-4-总结","link":"#_2-2-4-总结","children":[]}]},{"level":2,"title":"2.3.延迟队列","slug":"_2-3-延迟队列","link":"#_2-3-延迟队列","children":[{"level":3,"title":"2.3.1.安装DelayExchange插件","slug":"_2-3-1-安装delayexchange插件","link":"#_2-3-1-安装delayexchange插件","children":[]},{"level":3,"title":"2.3.2.DelayExchange原理","slug":"_2-3-2-delayexchange原理","link":"#_2-3-2-delayexchange原理","children":[]},{"level":3,"title":"2.3.3.使用DelayExchange","slug":"_2-3-3-使用delayexchange","link":"#_2-3-3-使用delayexchange","children":[]},{"level":3,"title":"2.3.4.总结","slug":"_2-3-4-总结","link":"#_2-3-4-总结","children":[]}]},{"level":2,"title":"3.1.消息堆积问题","slug":"_3-1-消息堆积问题","link":"#_3-1-消息堆积问题","children":[]},{"level":2,"title":"3.2.惰性队列","slug":"_3-2-惰性队列","link":"#_3-2-惰性队列","children":[{"level":3,"title":"3.2.1.基于命令行设置lazy-queue","slug":"_3-2-1-基于命令行设置lazy-queue","link":"#_3-2-1-基于命令行设置lazy-queue","children":[]},{"level":3,"title":"3.2.2.基于@Bean声明lazy-queue","slug":"_3-2-2-基于-bean声明lazy-queue","link":"#_3-2-2-基于-bean声明lazy-queue","children":[]},{"level":3,"title":"3.2.3.基于@RabbitListener声明LazyQueue","slug":"_3-2-3-基于-rabbitlistener声明lazyqueue","link":"#_3-2-3-基于-rabbitlistener声明lazyqueue","children":[]},{"level":3,"title":"3.3.总结","slug":"_3-3-总结","link":"#_3-3-总结","children":[]}]},{"level":2,"title":"4.1.集群分类","slug":"_4-1-集群分类","link":"#_4-1-集群分类","children":[]},{"level":2,"title":"4.2.普通集群","slug":"_4-2-普通集群","link":"#_4-2-普通集群","children":[{"level":3,"title":"4.2.1.集群结构和特征","slug":"_4-2-1-集群结构和特征","link":"#_4-2-1-集群结构和特征","children":[]},{"level":3,"title":"4.2.2.部署","slug":"_4-2-2-部署","link":"#_4-2-2-部署","children":[]}]},{"level":2,"title":"4.3.镜像集群","slug":"_4-3-镜像集群","link":"#_4-3-镜像集群","children":[{"level":3,"title":"4.3.1.集群结构和特征","slug":"_4-3-1-集群结构和特征","link":"#_4-3-1-集群结构和特征","children":[]},{"level":3,"title":"4.3.2.部署","slug":"_4-3-2-部署","link":"#_4-3-2-部署","children":[]}]},{"level":2,"title":"4.4.仲裁队列","slug":"_4-4-仲裁队列","link":"#_4-4-仲裁队列","children":[{"level":3,"title":"4.4.1.集群特征","slug":"_4-4-1-集群特征","link":"#_4-4-1-集群特征","children":[]},{"level":3,"title":"4.4.2.部署","slug":"_4-4-2-部署","link":"#_4-4-2-部署","children":[]},{"level":3,"title":"4.4.3.Java代码创建仲裁队列","slug":"_4-4-3-java代码创建仲裁队列","link":"#_4-4-3-java代码创建仲裁队列","children":[]},{"level":3,"title":"4.4.4.SpringAMQP连接MQ集群","slug":"_4-4-4-springamqp连接mq集群","link":"#_4-4-4-springamqp连接mq集群","children":[]}]}],"relativePath":"zh/java/面试重点技术/04-RabbitMQ课程讲义/RabbitMQ-高级篇.md","lastUpdated":1675892686000}'),$={name:"zh/java/面试重点技术/04-RabbitMQ课程讲义/RabbitMQ-高级篇.md"},J=p('<h1 id="服务异步通信-高级篇" tabindex="-1">服务异步通信-高级篇 <a class="header-anchor" href="#服务异步通信-高级篇" aria-hidden="true">#</a></h1><p>消息队列在使用过程中，面临着很多实际问题需要思考：</p><p><img src="'+o+'" alt="image-20210718155003157"></p><h1 id="_1-消息可靠性" tabindex="-1">1.消息可靠性 <a class="header-anchor" href="#_1-消息可靠性" aria-hidden="true">#</a></h1><p>消息从发送，到消费者接收，会经理多个过程：</p><p><img src="'+e+'" alt="image-20210718155059371"></p><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失： <ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li>MQ宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><p>针对这些问题，RabbitMQ分别给出了解决方案：</p><ul><li>生产者确认机制</li><li>mq持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ul><p>下面我们就通过案例来演示每一个步骤。</p><p>首先，导入课前资料提供的demo工程：</p><p><img src="'+t+'" alt="image-20210718155328927"></p><p>项目结构如下：</p><p><img src="'+c+'" alt="image-20210718155448734"></p><h2 id="_1-1-生产者消息确认" tabindex="-1">1.1.生产者消息确认 <a class="header-anchor" href="#_1-1-生产者消息确认" aria-hidden="true">#</a></h2><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。这种机制必须给每个消息指定一个唯一ID。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li>publisher-confirm，发送者确认 <ul><li>消息成功投递到交换机，返回ack</li><li>消息未投递到交换机，返回nack</li></ul></li><li>publisher-return，发送者回执 <ul><li>消息投递到交换机了，但是没有路由到队列。返回ACK，及路由失败原因。</li></ul></li></ul><p><img src="'+r+'" alt="image-20210718160907166"></p><p>注意：</p><p><img src="'+i+`" alt="image-20210718161707992"></p><h3 id="_1-1-1-修改配置" tabindex="-1">1.1.1.修改配置 <a class="header-anchor" href="#_1-1-1-修改配置" aria-hidden="true">#</a></h3><p>首先，修改publisher服务中的application.yml文件，添加下面的内容：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">spring</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rabbitmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">publisher-confirm-type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">correlated</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">publisher-returns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">mandatory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"></span></code></pre></div><p>说明：</p><ul><li><code>publish-confirm-type</code>：开启publisher-confirm，这里支持两种类型： <ul><li><code>simple</code>：同步等待confirm结果，直到超时</li><li><code>correlated</code>：异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback</li></ul></li><li><code>publish-returns</code>：开启publish-return功能，同样是基于callback机制，不过是定义ReturnCallback</li><li><code>template.mandatory</code>：定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息</li></ul><h3 id="_1-1-2-定义return回调" tabindex="-1">1.1.2.定义Return回调 <a class="header-anchor" href="#_1-1-2-定义return回调" aria-hidden="true">#</a></h3><p>每个RabbitTemplate只能配置一个ReturnCallback，因此需要在项目加载时配置：</p><p>修改publisher服务，添加一个：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">cn</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">itcast</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">mq</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">extern</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">slf4j</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Slf4j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">RabbitTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">beans</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">BeansException</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ApplicationContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ApplicationContextAware</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Configuration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Slf4j</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommonConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationContextAware</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setApplicationContext</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ApplicationContext</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">applicationContext</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BeansException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取RabbitTemplate</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">RabbitTemplate</span><span style="color:#A6ACCD;"> rabbitTemplate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> applicationContext</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RabbitTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 设置ReturnCallback</span></span>
<span class="line"><span style="color:#A6ACCD;">        rabbitTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setReturnCallback</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> replyCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> replyText</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exchange</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> routingKey</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 投递失败，记录日志</span></span>
<span class="line"><span style="color:#A6ACCD;">            log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                     replyCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> replyText</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exchange</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> routingKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 如果有业务需要，可以重发消息</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_1-1-3-定义confirmcallback" tabindex="-1">1.1.3.定义ConfirmCallback <a class="header-anchor" href="#_1-1-3-定义confirmcallback" aria-hidden="true">#</a></h3><p>ConfirmCallback可以在发送消息时指定，因为每个业务处理confirm成功或失败的逻辑不一定相同。</p><p>在publisher服务的cn.itcast.mq.spring.SpringAmqpTest类中，定义一个单元测试方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendMessage2SimpleQueue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> throws InterruptedException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1.消息体</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, spring amqp!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2.全局唯一的消息ID，需要封装到CorrelationData中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">CorrelationData</span><span style="color:#A6ACCD;"> correlationData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CorrelationData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UUID</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">randomUUID</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3.添加callback</span></span>
<span class="line"><span style="color:#A6ACCD;">    correlationData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFuture</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">addCallback</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isAck</span><span style="color:#89DDFF;">()){</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 3.1.ack，消息成功</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送成功, ID:{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> correlationData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 3.2.nack，消息失败</span></span>
<span class="line"><span style="color:#A6ACCD;">                log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送失败, ID:{}, 原因{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">correlationData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReason</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        ex </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送异常, ID:{}, 原因{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">correlationData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">ex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMessage</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 4.发送消息</span></span>
<span class="line"><span style="color:#A6ACCD;">    rabbitTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convertAndSend</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">task.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">task</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> correlationData</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 休眠一会儿，等待ack回执</span></span>
<span class="line"><span style="color:#A6ACCD;">    Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>快速把内部类中的唯一方法，变成lambda的快捷键是 Alt+Enter</p></blockquote><h3 id="_1-1-4-测试" tabindex="-1">1.1.4.测试 <a class="header-anchor" href="#_1-1-4-测试" aria-hidden="true">#</a></h3><p>正常发送到交换机的情况，执行了confirm中的success方法</p><p><img src="`+D+'" alt="image-20220123155652771"></p><p>没有发送到交换机的情况，执行了confirm中的fail方法</p><p><img src="'+y+'" alt="image-20220123155811012"></p><p>发送到交换机，但是没有到达路由的情况，执行了全局returnCallback方法</p><p><img src="'+F+`" alt="image-20220123155946847"></p><h2 id="_1-2-消息持久化" tabindex="-1">1.2.消息持久化 <a class="header-anchor" href="#_1-2-消息持久化" aria-hidden="true">#</a></h2><p>生产者确认可以确保消息投递到RabbitMQ的队列中，但是消息发送到RabbitMQ以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在RabbitMQ中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h3 id="_1-2-1-交换机持久化" tabindex="-1">1.2.1.交换机持久化 <a class="header-anchor" href="#_1-2-1-交换机持久化" aria-hidden="true">#</a></h3><p>RabbitMQ中交换机默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">simpleExchange</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirectExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simple.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>事实上，默认情况下，由SpringAMQP声明的交换机都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="`+A+`" alt="image-20210718164412450"></p><h3 id="_1-2-2-队列持久化" tabindex="-1">1.2.2.队列持久化 <a class="header-anchor" href="#_1-2-2-队列持久化" aria-hidden="true">#</a></h3><p>RabbitMQ中队列默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">simpleQueue</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 使用QueueBuilder构建队列，durable就是持久化的</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> QueueBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">durable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simple.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>事实上，默认情况下，由SpringAMQP声明的队列都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的队列都会带上<code>D</code>的标示：</p><p><img src="`+C+'" alt="image-20210718164729543"></p><h3 id="_1-2-3-消息持久化" tabindex="-1">1.2.3.消息持久化 <a class="header-anchor" href="#_1-2-3-消息持久化" aria-hidden="true">#</a></h3><p>利用SpringAMQP发送消息时，可以设置消息的属性（MessageProperties），指定delivery-mode：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p>用java代码指定：</p><p><img src="'+u+`" alt="image-20210718165100016"></p><p>默认情况下，SpringAMQP发出的任何消息都是持久化的，不用特意指定。</p><h2 id="_1-3-消费者消息确认" tabindex="-1">1.3.消费者消息确认 <a class="header-anchor" href="#_1-3-消费者消息确认" aria-hidden="true">#</a></h2><p>RabbitMQ是<strong>阅后即焚</strong>机制，RabbitMQ确认消息被消费者消费后会立刻删除。</p><p>而RabbitMQ是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向RabbitMQ发送ACK回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><ul><li>1）RabbitMQ投递消息给消费者</li><li>2）消费者获取消息后，返回ACK给RabbitMQ</li><li>3）RabbitMQ删除消息</li><li>4）消费者宕机，消息尚未处理</li></ul><p>这样，消息就丢失了。因此消费者返回ACK的时机非常重要。</p><p>而SpringAMQP则允许配置三种确认模式：</p><p>•manual：手动ack，需要在业务代码结束后，调用api发送ack。</p><p>•auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack</p><p>•none：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><ul><li>none模式下，消息投递是不可靠的，可能丢失</li><li>auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack</li><li>manual：自己根据业务情况，判断什么时候该ack</li></ul><p>一般，我们都是使用默认的auto即可。</p><h3 id="_1-3-1-演示none模式" tabindex="-1">1.3.1.演示none模式 <a class="header-anchor" href="#_1-3-1-演示none模式" aria-hidden="true">#</a></h3><p>修改consumer服务的application.yml文件，添加下面内容：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">spring</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rabbitmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">listener</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">simple</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">acknowledge-mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">none</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 关闭ack</span></span>
<span class="line"></span></code></pre></div><p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理异常：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RabbitListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">queues</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simple.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listenSimpleQueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消费者接收到simple.queue的消息：【{}】</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 模拟异常</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息处理完成！</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>测试可以发现，当消息处理抛异常时，消息依然被RabbitMQ删除了。</p><h3 id="_1-3-2-演示auto模式" tabindex="-1">1.3.2.演示auto模式 <a class="header-anchor" href="#_1-3-2-演示auto模式" aria-hidden="true">#</a></h3><p>再次把确认机制修改为auto:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">spring</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rabbitmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">listener</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">simple</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">acknowledge-mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 关闭ack</span></span>
<span class="line"></span></code></pre></div><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unack（未确定状态）：</p><p><img src="`+d+'" alt="image-20210718171705383"></p><p>抛出异常后，因为Spring会自动返回nack，所以消息恢复至Ready状态，并且没有被RabbitMQ删除：</p><p><img src="'+h+'" alt="image-20210718171759179"></p><h2 id="_1-4-消费失败重试机制" tabindex="-1">1.4.消费失败重试机制 <a class="header-anchor" href="#_1-4-消费失败重试机制" aria-hidden="true">#</a></h2><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者，然后再次异常，再次requeue，无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="'+g+`" alt="image-20210718172746378"></p><p>怎么办呢？</p><h3 id="_1-4-1-本地重试" tabindex="-1">1.4.1.本地重试 <a class="header-anchor" href="#_1-4-1-本地重试" aria-hidden="true">#</a></h3><p>我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><p>修改consumer服务的application.yml文件，添加内容：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">spring</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rabbitmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">listener</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">simple</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">retry</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">enabled</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 开启消费者失败重试</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">initial-interval</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 初识的失败等待时长为1秒</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">multiplier</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">max-attempts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 最大重试次数</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">stateless</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># true无状态；false有状态。如果业务中包含事务，这里改为false</span></span>
<span class="line"></span></code></pre></div><p>重启consumer服务，重复之前的测试。可以发现：</p><ul><li>在重试3次后，SpringAMQP会抛出异常AmqpRejectAndDontRequeueException，说明本地重试触发了</li><li>查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是ack，mq删除消息了</li></ul><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li><li>重试达到最大次数后，Spring会返回ack，消息会被丢弃</li></ul><h3 id="_1-4-2-失败策略" tabindex="-1">1.4.2.失败策略 <a class="header-anchor" href="#_1-4-2-失败策略" aria-hidden="true">#</a></h3><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由Spring内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecovery接口来处理，它包含三种不同的实现：</p><ul><li><p>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</p></li><li><p>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</p></li><li><p>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在consumer服务中定义处理失败消息的交换机和队列</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorMessageExchange</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirectExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorQueue</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Queue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Binding</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorBinding</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> errorQueue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> errorMessageExchange</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> BindingBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">errorQueue</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">errorMessageExchange</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">with</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">MessageRecoverer</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">republishMessageRecoverer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">RabbitTemplate</span><span style="color:#A6ACCD;"> rabbitTemplate</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RepublishMessageRecoverer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rabbitTemplate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>完整代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">cn</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">itcast</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">mq</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Binding</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">BindingBuilder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DirectExchange</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Queue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">core</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">RabbitTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">retry</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">MessageRecoverer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">amqp</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">rabbit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">retry</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">RepublishMessageRecoverer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">context</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">annotation</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorMessageConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorMessageExchange</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirectExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorQueue</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Queue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Binding</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">errorBinding</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">errorQueue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">errorMessageExchange</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> BindingBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">errorQueue</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">errorMessageExchange</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">with</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">MessageRecoverer</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">republishMessageRecoverer</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">RabbitTemplate</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">rabbitTemplate</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RepublishMessageRecoverer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rabbitTemplate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>3）重启测试</p><p>控制台打印信息：</p><p><img src="`+m+'" alt="image-20220123172507404"></p><p>MQ客户端队列信息展示</p><p>重试失败之后，消息会从simple.queue队列中自动入队到error.queue队列中存储</p><p><img src="'+b+'" alt="image-20220123172524662"></p><h2 id="_1-5-总结" tabindex="-1">1.5.总结 <a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a></h2><p>如何确保RabbitMQ消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><h1 id="_2-死信交换机" tabindex="-1">2.死信交换机 <a class="header-anchor" href="#_2-死信交换机" aria-hidden="true">#</a></h1><h2 id="_2-1-初识死信交换机" tabindex="-1">2.1.初识死信交换机 <a class="header-anchor" href="#_2-1-初识死信交换机" aria-hidden="true">#</a></h2><h3 id="_2-1-1-什么是死信交换机" tabindex="-1">2.1.1.什么是死信交换机 <a class="header-anchor" href="#_2-1-1-什么是死信交换机" aria-hidden="true">#</a></h3><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，检查DLX）。</p><p>如图，一个消息被消费者拒绝了，变成了死信：</p><p><img src="'+E+'" alt="image-20210718174328383"></p><p>因为simple.queue绑定了死信交换机 dl.direct，因此死信会投递给这个交换机：</p><p><img src="'+_+'" alt="image-20210718174416160"></p><p>如果这个死信交换机也绑定了一个队列，则消息最终会进入这个存放死信的队列：</p><p><img src="'+s+'" alt="image-20210718174506856"></p><p>另外，队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的RoutingKey</li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p><img src="'+f+'" alt="image-20210821073801398"></p><h3 id="_2-1-2-利用死信交换机接收死信-拓展" tabindex="-1">2.1.2.利用死信交换机接收死信（拓展） <a class="header-anchor" href="#_2-1-2-利用死信交换机接收死信-拓展" aria-hidden="true">#</a></h3><p>在失败重试策略中，默认的RejectAndDontRequeueRecoverer会在本地重试次数耗尽后，发送reject给RabbitMQ，消息变成死信，被丢弃。</p><p>我们可以给simple.queue添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><p><img src="'+s+`" alt="image-20210718174506856"></p><p>我们在consumer服务中，定义一组死信交换机、死信队列：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">simpleQueue2</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> QueueBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">durable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simple.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指定队列名称，并持久化</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deadLetterExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指定死信交换机</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明死信交换机 dl.direct</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dlExchange</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirectExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明存储死信的队列 dl.queue</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dlQueue</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Queue</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将死信队列 与 死信交换机绑定</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Binding</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dlBinding</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> BindingBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">dlQueue</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">dlExchange</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">with</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">simple</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-1-3-总结" tabindex="-1">2.1.3.总结 <a class="header-anchor" href="#_2-1-3-总结" aria-hidden="true">#</a></h3><p>什么样的消息会成为死信？</p><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>死信交换机的使用场景是什么？</p><ul><li>如果队列绑定了死信交换机，死信会投递到死信交换机；</li><li>可以利用死信交换机收集所有消费者处理失败的消息（死信），交由人工处理，进一步提高消息队列的可靠性。</li></ul><h2 id="_2-2-ttl" tabindex="-1">2.2.TTL <a class="header-anchor" href="#_2-2-ttl" aria-hidden="true">#</a></h2><p>一个队列中的消息如果超时未消费，则会变为死信，超时分为两种情况：</p><ul><li>消息所在的队列设置了超时时间</li><li>消息本身设置了超时时间</li></ul><p><img src="`+q+`" alt="image-20210718182643311"></p><h3 id="_2-2-1-接收超时死信的死信交换机" tabindex="-1">2.2.1.接收超时死信的死信交换机 <a class="header-anchor" href="#_2-2-1-接收超时死信的死信交换机" aria-hidden="true">#</a></h3><p>在consumer服务的SpringRabbitListener中，定义一个新的消费者，并且声明 死信交换机、死信队列：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RabbitListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">bindings</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">QueueBinding</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Queue</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.ttl.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">durable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">exchange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Exchange</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.ttl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">key</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">listenDlQueue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">接收到 dl.ttl.queue的延迟消息：{}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-2-声明一个队列-并且指定ttl" tabindex="-1">2.2.2.声明一个队列，并且指定TTL <a class="header-anchor" href="#_2-2-2-声明一个队列-并且指定ttl" aria-hidden="true">#</a></h3><p>要给队列设置超时时间，需要在声明队列时配置x-message-ttl属性：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ttlQueue</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> QueueBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">durable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指定队列名称，并持久化</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ttl</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置队列的超时时间，10秒</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deadLetterExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dl.ttl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 指定死信交换机</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>注意，这个队列设定了死信交换机为<code>dl.ttl.direct</code></p><p>声明交换机，将ttl与交换机绑定：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DirectExchange</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ttlExchange</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DirectExchange</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Binding</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ttlBinding</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> BindingBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ttlQueue</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">to</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">ttlExchange</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">with</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>发送消息，但是不要指定TTL：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testTTLQueue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建消息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, ttl queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 消息ID，需要封装到CorrelationData中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">CorrelationData</span><span style="color:#A6ACCD;"> correlationData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CorrelationData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UUID</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">randomUUID</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 发送消息</span></span>
<span class="line"><span style="color:#A6ACCD;">    rabbitTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convertAndSend</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> correlationData</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 记录日志</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送消息成功</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>发送消息的日志：</p><p><img src="`+v+'" alt="image-20210718191657478"></p><p>查看下接收消息的日志：</p><p><img src="'+x+`" alt="image-20210718191738706"></p><p>因为队列的TTL值是10000ms，也就是10秒。可以看到消息发送与接收之间的时差刚好是10秒。</p><h3 id="_2-2-3-发送消息时-设定ttl" tabindex="-1">2.2.3.发送消息时，设定TTL <a class="header-anchor" href="#_2-2-3-发送消息时-设定ttl" aria-hidden="true">#</a></h3><p>在发送消息时，也可以指定TTL：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testTTLMsg</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 创建消息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Message</span><span style="color:#A6ACCD;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">MessageBuilder</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withBody</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello, ttl message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">StandardCharsets</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UTF_8</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setExpiration</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 消息ID，需要封装到CorrelationData中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">CorrelationData</span><span style="color:#A6ACCD;"> correlationData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CorrelationData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UUID</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">randomUUID</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 发送消息</span></span>
<span class="line"><span style="color:#A6ACCD;">    rabbitTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convertAndSend</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl.direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ttl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> correlationData</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送消息成功</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>查看发送消息日志：</p><p><img src="`+k+'" alt="image-20210718191939140"></p><p>接收消息日志：</p><p><img src="'+Q+'" alt="image-20210718192004662"></p><p>这次，发送与接收的延迟只有5秒。说明当队列、消息都设置了TTL时，任意一个到期就会成为死信。</p><h3 id="_2-2-4-总结" tabindex="-1">2.2.4.总结 <a class="header-anchor" href="#_2-2-4-总结" aria-hidden="true">#</a></h3><p>消息超时的两种方式是？</p><ul><li>给队列设置ttl属性，进入队列后超过ttl时间的消息变为死信</li><li>给消息设置ttl属性，队列接收到消息超过ttl时间后变为死信</li></ul><p>如何实现发送一个消息20秒后消费者才收到消息？</p><ul><li>给消息的目标队列指定死信交换机</li><li>将消费者监听的队列绑定到死信交换机</li><li>发送消息时给消息设置超时时间为20秒</li></ul><h2 id="_2-3-延迟队列" tabindex="-1">2.3.延迟队列 <a class="header-anchor" href="#_2-3-延迟队列" aria-hidden="true">#</a></h2><p>利用TTL结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为延迟队列（Delay Queue）模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15 分钟内未支付，则自动取消</li><li>预约工作会议，20分钟后自动通知所有参会人员</li></ul><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。</p><p>这个插件就是DelayExchange插件。参考RabbitMQ的插件列表页面：<a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="'+R+'" alt="image-20210718192529342"></p><p>使用方式可以参考官网地址：<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq" target="_blank" rel="noreferrer">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</a></p><h3 id="_2-3-1-安装delayexchange插件" tabindex="-1">2.3.1.安装DelayExchange插件 <a class="header-anchor" href="#_2-3-1-安装delayexchange插件" aria-hidden="true">#</a></h3><p>参考课前资料：</p><p><img src="'+M+'" alt="image-20210718193409812"></p><h3 id="_2-3-2-delayexchange原理" tabindex="-1">2.3.2.DelayExchange原理 <a class="header-anchor" href="#_2-3-2-delayexchange原理" aria-hidden="true">#</a></h3><p>DelayExchange需要将一个交换机声明为delayed类型。当我们发送消息到delayExchange时，流程如下：</p><ul><li>接收消息</li><li>判断消息是否具备x-delay属性</li><li>如果有x-delay属性，说明是延迟消息，持久化到硬盘，读取x-delay值，作为延迟时间</li><li>返回routing not found结果给消息发送者</li><li>x-delay时间到期后，重新投递消息到指定队列</li></ul><h3 id="_2-3-3-使用delayexchange" tabindex="-1">2.3.3.使用DelayExchange <a class="header-anchor" href="#_2-3-3-使用delayexchange" aria-hidden="true">#</a></h3><p>插件的使用也非常简单：声明一个交换机，交换机的类型可以是任意类型，只需要设定delayed属性为true即可，然后声明队列与其绑定即可。</p><h4 id="_1-声明delayexchange交换机" tabindex="-1">1）声明DelayExchange交换机 <a class="header-anchor" href="#_1-声明delayexchange交换机" aria-hidden="true">#</a></h4><p>基于注解方式（推荐）：</p><p><img src="'+B+'" alt="image-20210718193747649"></p><p>也可以基于@Bean的方式：</p><p><img src="'+T+'" alt="image-20210718193831076"></p><h4 id="_2-发送消息" tabindex="-1">2）发送消息 <a class="header-anchor" href="#_2-发送消息" aria-hidden="true">#</a></h4><p>发送消息时，一定要携带x-delay属性，指定延迟的时间：</p><p><img src="'+j+'" alt="image-20210718193917009"></p><h4 id="_3-测试" tabindex="-1">3）测试 <a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a></h4><p>重启consumer，然后启动publisher发送消息</p><p>publisher发送消息控制台信息展示：</p><p><img src="'+w+'" alt="image-20220123201327300"></p><p>consumer接收消息控制台信息展示：</p><p>是在发送消息，10s后才接收到的消息</p><p><img src="'+S+'" alt="image-20220123201339630"></p><p>但是：也发现，publisher控制台信息中有报错信息展示</p><p>错误信息：发现走了return回调callback函数,说明消息到了交换机，没有到达队列中</p><p>错误原因：是因为延迟等待的问题，也是交换机中不能够存储那么久的消息，只能进行报错</p><p>解决办法：</p><p>​ 可以在return的回调函数中判断是否是延迟队列，如果是直接return</p><p><img src="'+z+'" alt="image-20220123202042641"></p><p>再次进行发送消息，会发现，就不在出现报错信息了。</p><h3 id="_2-3-4-总结" tabindex="-1">2.3.4.总结 <a class="header-anchor" href="#_2-3-4-总结" aria-hidden="true">#</a></h3><p>延迟队列插件的使用步骤包括哪些？</p><p>•声明一个交换机，添加delayed属性为true</p><p>•发送消息时，添加x-delay头，值为超时时间</p><h1 id="_3-惰性队列" tabindex="-1">3.惰性队列 <a class="header-anchor" href="#_3-惰性队列" aria-hidden="true">#</a></h1><h2 id="_3-1-消息堆积问题" tabindex="-1">3.1.消息堆积问题 <a class="header-anchor" href="#_3-1-消息堆积问题" aria-hidden="true">#</a></h2><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题。</p><p><img src="'+L+`" alt="image-20210718194040498"></p><p>解决消息堆积有两种思路：</p><ul><li>增加更多消费者，提高消费速度。也就是我们之前说的work queue模式</li><li>扩大队列容积，提高堆积上限</li></ul><p>要提升队列容积，把消息保存在内存中显然是不行的。</p><h2 id="_3-2-惰性队列" tabindex="-1">3.2.惰性队列 <a class="header-anchor" href="#_3-2-惰性队列" aria-hidden="true">#</a></h2><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><h3 id="_3-2-1-基于命令行设置lazy-queue" tabindex="-1">3.2.1.基于命令行设置lazy-queue <a class="header-anchor" href="#_3-2-1-基于命令行设置lazy-queue" aria-hidden="true">#</a></h3><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rabbitmqctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set_policy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Lazy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^lazy-queue$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;queue-mode&quot;:&quot;lazy&quot;}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--apply-to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">queues</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues </code>：策略的作用对象，是所有的队列</li></ul><h3 id="_3-2-2-基于-bean声明lazy-queue" tabindex="-1">3.2.2.基于@Bean声明lazy-queue <a class="header-anchor" href="#_3-2-2-基于-bean声明lazy-queue" aria-hidden="true">#</a></h3><p><img src="`+I+'" alt="image-20210718194522223"></p><h3 id="_3-2-3-基于-rabbitlistener声明lazyqueue" tabindex="-1">3.2.3.基于@RabbitListener声明LazyQueue <a class="header-anchor" href="#_3-2-3-基于-rabbitlistener声明lazyqueue" aria-hidden="true">#</a></h3><p><img src="'+P+'" alt="image-20210718194539054"></p><h3 id="_3-3-总结" tabindex="-1">3.3.总结 <a class="header-anchor" href="#_3-3-总结" aria-hidden="true">#</a></h3><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>使用惰性队列，可以再mq中保存更多消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些？</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h1 id="_4-mq集群" tabindex="-1">4.MQ集群 <a class="header-anchor" href="#_4-mq集群" aria-hidden="true">#</a></h1><h2 id="_4-1-集群分类" tabindex="-1">4.1.集群分类 <a class="header-anchor" href="#_4-1-集群分类" aria-hidden="true">#</a></h2><p>RabbitMQ的是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><p>•<strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p><p>•<strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ的3.8版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</p><h2 id="_4-2-普通集群" tabindex="-1">4.2.普通集群 <a class="header-anchor" href="#_4-2-普通集群" aria-hidden="true">#</a></h2><h3 id="_4-2-1-集群结构和特征" tabindex="-1">4.2.1.集群结构和特征 <a class="header-anchor" href="#_4-2-1-集群结构和特征" aria-hidden="true">#</a></h3><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="'+U+'" alt="image-20210718220843323"></p><h3 id="_4-2-2-部署" tabindex="-1">4.2.2.部署 <a class="header-anchor" href="#_4-2-2-部署" aria-hidden="true">#</a></h3><p>参考课前资料：《<a href="http://xn--RabbitMQ-q29mo90kol6dt10b.md" target="_blank" rel="noreferrer">RabbitMQ部署指南.md</a>》</p><h2 id="_4-3-镜像集群" tabindex="-1">4.3.镜像集群 <a class="header-anchor" href="#_4-3-镜像集群" aria-hidden="true">#</a></h2><h3 id="_4-3-1-集群结构和特征" tabindex="-1">4.3.1.集群结构和特征 <a class="header-anchor" href="#_4-3-1-集群结构和特征" aria-hidden="true">#</a></h3><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的<strong>主节点，<strong>备份到的其它节点叫做该队列的</strong>镜像</strong>节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主</li></ul><p>结构如图：</p><p><img src="'+K+`" alt="image-20210718221039542"></p><h3 id="_4-3-2-部署" tabindex="-1">4.3.2.部署 <a class="header-anchor" href="#_4-3-2-部署" aria-hidden="true">#</a></h3><p>参考课前资料：《<a href="http://xn--RabbitMQ-q29mo90kol6dt10b.md" target="_blank" rel="noreferrer">RabbitMQ部署指南.md</a>》</p><h2 id="_4-4-仲裁队列" tabindex="-1">4.4.仲裁队列 <a class="header-anchor" href="#_4-4-仲裁队列" aria-hidden="true">#</a></h2><h3 id="_4-4-1-集群特征" tabindex="-1">4.4.1.集群特征 <a class="header-anchor" href="#_4-4-1-集群特征" aria-hidden="true">#</a></h3><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致</li></ul><h3 id="_4-4-2-部署" tabindex="-1">4.4.2.部署 <a class="header-anchor" href="#_4-4-2-部署" aria-hidden="true">#</a></h3><p>参考课前资料：《<a href="http://xn--RabbitMQ-q29mo90kol6dt10b.md" target="_blank" rel="noreferrer">RabbitMQ部署指南.md</a>》</p><h3 id="_4-4-3-java代码创建仲裁队列" tabindex="-1">4.4.3.Java代码创建仲裁队列 <a class="header-anchor" href="#_4-4-3-java代码创建仲裁队列" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Queue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">quorumQueue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">QueueBuilder</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">durable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">quorum.queue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 持久化</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">quorum</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 仲裁队列</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-4-4-springamqp连接mq集群" tabindex="-1">4.4.4.SpringAMQP连接MQ集群 <a class="header-anchor" href="#_4-4-4-springamqp连接mq集群" aria-hidden="true">#</a></h3><p>注意，这里用address来代替host、port方式</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">spring</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  rabbitmq</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    addresses</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">192.168</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">150</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">105</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">8071</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">192.168</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">150</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">105</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">8072</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">192.168</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">150</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">105</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#F78C6C;">8073</span></span>
<span class="line"><span style="color:#A6ACCD;">    username</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> itcast</span></span>
<span class="line"><span style="color:#A6ACCD;">    password</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123321</span></span>
<span class="line"><span style="color:#A6ACCD;">    virtual</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">host</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span></span>
<span class="line"></span></code></pre></div><p>注意：测试的时候，要把其他的config注释掉，方式报错。</p>`,288),N=[J];function O(V,X,G,H,W,Y){return l(),n("div",null,N)}const as=a($,[["render",O]]);export{ss as __pageData,as as default};
